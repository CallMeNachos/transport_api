-- I created the SQL scripts below like I was using BigQuery

-- Create table if not exists for the first time
-- We usually partition the table by ingestion time but other columns could be considerated depending on the use case
-- Cluster fields are also set up in order to add a second level of reading optimization
CREATE TABLE IF NOT EXISTS project_id.dataset_wh.ovapi_actuals
PARTITION BY _PARTITIONTIME
CLUSTER BY DestinationName50, DataOwnerCode, TransportType
AS
SELECT
    IsTimingStop,
    DestinationName50,
    DataOwnerCode,
    OperatorCode,
    FortifyOrderNumber,
    TransportType,
    Latitude,
    Longitude,
    JourneyNumber,
    JourneyPatternCode,
    LocalServiceLevelCode,
    LineDirection,
    OperationDate,
    TimingPointCode,
    WheelChairAccessible,
    LineName,
    LinePublicNumber,
    LastUpdateTimeStamp,
    DestinationCode,
    ExpectedDepartureTime,
    UserStopOrderNumber,
    ProductFormulaType,
    TimingPointName,
    LinePlanningNumber,
    TimingPointDataOwnerCode,
    TimingPointTown,
    TripStopStatus,
    UserStopCode,
    JourneyStopType,
    TargetArrivalTime,
    TargetDepartureTime,
    ExpectedArrivalTime,
    NumberOfCoaches,
    TimingPointWheelChairAccessible,
    TimingPointVisualAccessible,
    GetIn,
    ActualID,
    LineID,
    StopAreaCode,
    SideCode,
    GetOut,
    ReasonType,
    SubReasonType,
    AdviceType,
    SubAdviceType
FROM
    project_id.dataset_wh.extract_ovapi;

-- Alteration is done in order to optimize the read and write of the table
ALTER TABLE project_id.dataset_wh.ovapi_actuals
  SET OPTIONS (
    -- A partition expiration can be added when large amount of data is aimed to be stored
    -- Sets partition expiration to 5 days
    partition_expiration_days = 5,
    -- Require that all queries on the table must include a WHERE clause on the partitioning column
    -- It avoids the scan of the whole table
    require_partition_filter = true);

-- In order to insert new rows and update the existing one, a MERGE statement is applied using the id ActualID and LineID
-- A WHERE clause is used for processing the latest data ingested.

MERGE INTO project_id.dataset_wh.ovapi_actuals AS destination
USING(

SELECT 
    IsTimingStop, 
    DestinationName50, 
    DataOwnerCode,
    OperatorCode, 
    FortifyOrderNumber, 
    TransportType, 
    Latitude,
    Longitude, 
    JourneyNumber, 
    JourneyPatternCode,
    LocalServiceLevelCode, 
    LineDirection, 
    OperationDate,
    TimingPointCode, 
    WheelChairAccessible, 
    LineName,
    LinePublicNumber, 
    LastUpdateTimeStamp, 
    DestinationCode,
    ExpectedDepartureTime, 
    UserStopOrderNumber, 
    ProductFormulaType,
    TimingPointName, 
    LinePlanningNumber, 
    TimingPointDataOwnerCode,
    TimingPointTown, 
    TripStopStatus, 
    UserStopCode, 
    JourneyStopType,
    TargetArrivalTime, 
    TargetDepartureTime, 
    ExpectedArrivalTime,
    NumberOfCoaches, 
    TimingPointWheelChairAccessible,
    TimingPointVisualAccessible, 
    GetIn, 
    ActualID, 
    LineID,
    StopAreaCode, 
    SideCode, 
    GetOut, 
    ReasonType, 
    SubReasonType,
    AdviceType, 
    SubAdviceType
FROM
    extract_ovapi
WHERE _PARTITIONTIME >= {previous_partitiontime}
) AS source
    ON source.ActualID = destination.ActualID
    AND source.LineID = destination.LineID

WHEN MATCHED THEN
    UPDATE SET
    IsTimingStop = source.IsTimingStop,
    DestinationName50 = source.DestinationName50,
    DataOwnerCode = source.DataOwnerCode,
    OperatorCode = source.OperatorCode,
    FortifyOrderNumber = source.FortifyOrderNumber,
    TransportType = source.TransportType,
    Latitude = source.Latitude,
    Longitude = source.Longitude,
    JourneyNumber = source.JourneyNumber,
    JourneyPatternCode = source.JourneyPatternCode,
    LocalServiceLevelCode = source.LocalServiceLevelCode,
    LineDirection = source.LineDirection,
    OperationDate = source.OperationDate,
    TimingPointCode = source.TimingPointCode,
    WheelChairAccessible = source.WheelChairAccessible,
    LineName = source.LineName,
    LinePublicNumber = source.LinePublicNumber,
    LastUpdateTimeStamp = source.LastUpdateTimeStamp,
    DestinationCode = source.DestinationCode,
    ExpectedDepartureTime = source.ExpectedDepartureTime,
    UserStopOrderNumber = source.UserStopOrderNumber,
    ProductFormulaType = source.ProductFormulaType,
    TimingPointName = source.TimingPointName,
    LinePlanningNumber = source.LinePlanningNumber,
    TimingPointDataOwnerCode = source.TimingPointDataOwnerCode,
    TimingPointTown = source.TimingPointTown,
    TripStopStatus = source.TripStopStatus,
    UserStopCode = source.UserStopCode,
    JourneyStopType = source.JourneyStopType,
    TargetArrivalTime = source.TargetArrivalTime,
    TargetDepartureTime = source.TargetDepartureTime,
    ExpectedArrivalTime = source.ExpectedArrivalTime,
    NumberOfCoaches = source.NumberOfCoaches,
    TimingPointWheelChairAccessible = source.TimingPointWheelChairAccessible,
    TimingPointVisualAccessible = source.TimingPointVisualAccessible,
    GetIn = source.GetIn,
    ActualID = source.ActualID,
    LineID = source.LineID,
    StopAreaCode = source.StopAreaCode,
    SideCode = source.SideCode,
    GetOut = source.GetOut,
    ReasonType = source.ReasonType,
    SubReasonType = source.SubReasonType,
    AdviceType = source.AdviceType,
    SubAdviceTyp = source.SubAdviceType
WHEN NOT MATCHED THEN
    INSERT(
        IsTimingStop,
        DestinationName50,
        DataOwnerCode,
        OperatorCode,
        FortifyOrderNumber,
        TransportType,
        Latitude,
        Longitude,
        JourneyNumber,
        JourneyPatternCode,
        LocalServiceLevelCode,
        LineDirection,
        OperationDate,
        TimingPointCode,
        WheelChairAccessible,
        LineName,
        LinePublicNumber,
        LastUpdateTimeStamp,
        DestinationCode,
        ExpectedDepartureTime,
        UserStopOrderNumber,
        ProductFormulaType,
        TimingPointName,
        LinePlanningNumber,
        TimingPointDataOwnerCode,
        TimingPointTown,
        TripStopStatus,
        UserStopCode,
        JourneyStopType,
        TargetArrivalTime,
        TargetDepartureTime,
        ExpectedArrivalTime,
        NumberOfCoaches,
        TimingPointWheelChairAccessible,
        TimingPointVisualAccessible,
        GetIn,
        ActualID,
        LineID,
        StopAreaCode,
        SideCode,
        GetOut,
        ReasonType,
        SubReasonType,
        AdviceType,
        SubAdviceType
    )
    VALUES (
        IsTimingStop,
        DestinationName50,
        DataOwnerCode,
        OperatorCode,
        FortifyOrderNumber,
        TransportType,
        Latitude,
        Longitude,
        JourneyNumber,
        JourneyPatternCode,
        LocalServiceLevelCode,
        LineDirection,
        OperationDate,
        TimingPointCode,
        WheelChairAccessible,
        LineName,
        LinePublicNumber,
        LastUpdateTimeStamp,
        DestinationCode,
        ExpectedDepartureTime,
        UserStopOrderNumber,
        ProductFormulaType,
        TimingPointName,
        LinePlanningNumber,
        TimingPointDataOwnerCode,
        TimingPointTown,
        TripStopStatus,
        UserStopCode,
        JourneyStopType,
        TargetArrivalTime,
        TargetDepartureTime,
        ExpectedArrivalTime,
        NumberOfCoaches,
        TimingPointWheelChairAccessible,
        TimingPointVisualAccessible,
        GetIn,
        ActualID,
        LineID,
        StopAreaCode,
        SideCode,
        GetOut,
        ReasonType,
        SubReasonType,
        AdviceType,
        SubAdviceType
    )
